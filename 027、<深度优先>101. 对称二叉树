101. Symmetric Tree
https://leetcode-cn.com/problems/symmetric-tree/description/
博客 ：https://blog.csdn.net/feliciafay/article/details/18397183
1、递归
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL) return true;
        return symmetric(root->left,root->right);//自己写的函数
    }
private:
    bool symmetric(TreeNode* left_node,TreeNode* right_node){
        if(left_node!=NULL&&right_node!=NULL&&left_node->val==right_node->val){
            return symmetric(left_node->left,right_node->right)&&symmetric(left_node->right,right_node->left);//左节点的左子点与
            //右节点的右子点要相同，左节点的右子点与右节点的左子点要相同。
        
        }
        else if(left_node==NULL&&right_node==NULL) return true;
        else return false;
    }
};
2、迭代
class Solution {
public:
        bool isSymmetric(TreeNode *root) {
        vector<TreeNode*>node_vector;
        if(root==NULL) return true;
        node_vector.push_back(root->left);
        node_vector.push_back(root->right);
        while(!node_vector.empty()){
            vector<TreeNode*>node_vector_temp;//用于更新node_vector内容的临时变量
            int i=0;
            int j=node_vector.size()-1;
            while(i<j){
               if(node_vector[i]==NULL&&node_vector[j]!=NULL||node_vector[i]!=NULL&&node_vector[j]==NULL)
                    return false;
                if(node_vector[i]!=NULL&&node_vector[j]!=NULL&&node_vector[i]->val!=node_vector[j]->val)
                    return false;
                i++;
                j--; 
            }
            for(int i=0;i<node_vector.size();i++){
                if(node_vector[i]!=NULL){//本行重要,因为它不存在时，node[i]->left作为空指针添加到tmp中，对结果造成影响。
                    node_vector_temp.push_back(node_vector[i]->left);
                    node_vector_temp.push_back(node_vector[i]->right);
                }
            }
            node_vector.swap(node_vector_temp);//同一深度的所有节点  更新node_vector
            
        }
        return true;
    }
};
 
知识点 
 node_vector.swap(node_vector_temp)//用另一内容替代
 node.clear()//清空
