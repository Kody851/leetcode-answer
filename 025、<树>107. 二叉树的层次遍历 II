https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/description/
[LeetCode] Binary Tree Level Order Traversal II 二叉树层序遍历之二 - Grandyang - 博客园 http://www.cnblogs.com/grandyang/p/4051326.html
给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）
例如：
给定二叉树 [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
返回其自底向上的层次遍历为：
[
  [15,7],
  [9,20],
  [3]
]

知识点 ：1、.insert
vector<int> v(3);  
v[0]=2; //v[0]是第0个元素 
v[1]=7;  
v[2]=9;  
v.insert(v.begin(),8);//在最前面插入新元素。  
v.insert(v.begin()+2,1);//在迭代器中第二个元素前插入新元素  （第0，第1，第2）
v.insert(v.end(),3);//在向量末尾追加新元素。 
2、
 rbegin和rend，很有用！_Canny_新浪博客 http://blog.sina.com.cn/s/blog_59fabe0301019457.html
 
1、先至顶向下
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>>res;//用于存放最终结果
        if(root==NULL) return res;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            vector<int>onelevel;//每一层元素的存放
            int size=q.size();//每一层元素的个数
            for(int i=0;i<size;++i){
                TreeNode* node=q.front();
                q.pop();
                onelevel.push_back(node->val);
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            res.push_back(onelevel);
        }
        vector<vector<int>>res2;
        for(int i=res.size()-1;i>=0;i--){
            res2.push_back(res[i]);//反过来
        }
        return res2;
    }
};
2、使用insert反向插
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>>res;//用于存放最终结果
        if(root==NULL) return res;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            vector<int>onelevel;//每一层元素的存放
            int size=q.size();//每一层元素的个数
            for(int i=0;i<size;++i){
                TreeNode* node=q.front();
                q.pop();
                onelevel.push_back(node->val);
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            res.push_back(onelevel);
            res.insert(res.begin(),onelevel);//从前面插入
        }
        return res;
    }
};
3、
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>>res;//用于存放最终结果
        if(root==NULL) return res;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            vector<int>onelevel;//每一层元素的存放
            int size=q.size();//每一层元素的个数
            for(int i=0;i<size;++i){
                TreeNode* node=q.front();
                q.pop();
                onelevel.push_back(node->val);
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            res.push_back(onelevel);
        }
        return vector<vector<int>>(res.rbegin(),res.rend());
    }
};
