三、蓄水池抽样
在一个给定长度的数组中随机等概率抽取一个数据很容易，但如果面对的是长度未知的海量数据流呢？蓄水池采样(Reservoir Sampling)算法就是来解决这个问题的。
（1）先选取数据流中的前k个元素，保存在集合A中；
（2）从第j（k + 1 <= j <= n）个元素开始，每次先以概率p = k/j选择是否让第j个元素留下。若j被选中，则从A中随机选择一个元素并用该元素j替换它；否则直接淘汰该元素；
（3）重复步骤2直到结束，最后集合A中剩下的就是保证随机抽取的k个元素。
公式：蓄水池抽样——《编程珠玑》读书笔记 - Stay hungry, Stay foolish - CSDN博客 https://blog.csdn.net/huagong_adu/article/details/7619665

给定一个单链表，随机选择链表的一个节点，并返回相应的节点值。保证每个节点被选的概率一样。
进阶:
如果链表十分大且长度未知，如何解决这个问题？你能否使用常数级空间复杂度实现？
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    Solution(ListNode* head) {
        p = head;
    }
    
    /** Returns a random node's value. */
    int getRandom() {
        ListNode *tem = p;
        int val = p->val;
        for(int i =1; tem; i++)
        {
            if(rand()%i==0) val = tem->val;//rand()%i可获得[0,i-1]之间的随机数，1/i的概率取0
            tem = tem->next;
        }
        return val;
    }
private:
    ListNode *p;
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */
