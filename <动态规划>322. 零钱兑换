322. Coin Change
https://leetcode-cn.com/problems/coin-change/description/
给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。
示例 1:
输入: coins = [1, 2, 5], amount = 11
输出: 3 
解释: 11 = 5 + 5 + 1
示例 2:
输入: coins = [2], amount = 3
输出: -1
说明:
你可以认为每种硬币的数量是无限的。

只有这个网址把问题讲清楚了：（可以不看，直接看最优解）
https://ask.julyedu.com/article/402
参考代码：
https://blog.csdn.net/tstsugeg/article/details/50417850
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        if(amount<0||coins.empty()) return -1;
        vector<int>dp(amount+1, amount+1);//初始化确保是一个“最大的数”
        dp[0]=0;
        for(int i=1;i<=amount;i++){
            for(int j=0;j<coins.size();j++){
                if(i>=coins[j]){
                    dp[i]=min(dp[i],dp[i-coins[j]]+1);//通过j遍历coins，不断更新dp[i]，找到最小的。初始是最大的
                }
            }
        }
        return dp[amount]==amount+1?-1:dp[amount];
    }
};
