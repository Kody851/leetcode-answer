https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/description/
博客：leetcode 104 Maximum Depth of Binary Tree二叉树求深度 - CSDN博客 https://blog.csdn.net/wangyaninglm/article/details/45700837
1、
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL) return 0;
        int depth_l=maxDepth(root->left);
        int depth_r=maxDepth(root->right);
        return depth_l>depth_r ? depth_l+1 : depth_r+1 ;
    }
};

int maxDepth(TreeNode* root) {
        if(root==NULL) return 0;
        else if(root->left==NULL&&root->right==NULL) return 1;
        else{
            return max(maxDepth(root->left),maxDepth(root->right))+1;
        }
    }
    
2、不递归的解法
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if (!root) return 0;
        int res=0;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int n = q.size();
            for(int i=0;i<n;i++){//不可以使用for(int i=0;i<q.size();i++)，必须新建int n = q.size();否则不会更新。
                TreeNode* t=q.front();
                q.pop();
                if(t->left) q.push(t->left);
                if(t->right) q.push(t->right);   
            }
            res++; 
        }
        return res;
    }
};
