198. House Robber
https://leetcode-cn.com/problems/house-robber/description/

class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==0) return 0;
        vector<int>dp(n);
        dp[0]=nums[0];
        dp[1]=max(nums[0],nums[1]);
        for(int i=2;i<n;++i){
            dp[i]=max(dp[i-2]+nums[i],dp[i-1]);
        }
        return dp[n-1];
    }
};

解法：动态规划DP。本质相当于在一列数组中取出一个或多个不相邻数，使其和最大。

State: dp[i]，表示到第i个房子时能够抢到的最大金额。

Function: dp[i] = max(num[i] + dp[i - 2], dp[i - 1])

Initialize: dp[0] = num[0], dp[1] = max(num[0], num[1]) 或者 dp[0] = 0, dp[1] = 0

Return: dp[n]
