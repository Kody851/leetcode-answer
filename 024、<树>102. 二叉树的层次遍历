https://leetcode-cn.com/problems/binary-tree-level-order-traversal/description/
[LeetCode] Binary Tree Level Order Traversal 二叉树层序遍历 - Grandyang - 博客园 https://www.cnblogs.com/grandyang/p/4051321.html

由于需要把每层的节点分别放入到数组中，因此需要引入变量n记录每层的节点数量。剩下的，就是广度优先搜索的方法了。

广度优先搜索算法（Breadth First Search），又叫宽度优先搜索，或横向优先搜索。从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。借助队列数据结构，由于队列是先进先出的顺序，因此可以先将左子树入队，然后再将右子树入队。这样一来，左子树结点就存在队头，可以先被访问到。

时间复杂度：O(n)

空间复杂度：O(n)
1、迭代
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>>res;//用于存放最终结果
        if(root==NULL) return res;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            vector<int>onelevel;//每一层元素的存放
            int size=q.size();//每一层元素的个数
            for(int i=0;i<size;++i){
                TreeNode* node=q.front();
                q.pop();
                onelevel.push_back(node->val);
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            res.push_back(onelevel);
        }
        return res;
    }
    
};
2、递归（待续！！！）
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int> > res;
        levelorder(root, 0, res);
        return res;
    }
    void levelorder(TreeNode *root, int level, vector<vector<int> > &res) {
        if (!root) return;
        if (res.size() == level) res.push_back({});
        res[level].push_back(root->val);
        if (root->left) levelorder(root->left, level + 1, res);
        if (root->right) levelorder(root->right, level + 1, res);
    }
};
