中文：https://leetcode-cn.com/problems/reverse-linked-list/description/
博客：https://blog.csdn.net/u012501459/article/details/47144951

1、迭代
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(!head) return head;
        ListNode* cur=head;
        ListNode* pre=NULL;
        ListNode* aft=NULL;
        while(cur){
            aft=cur->next;
            cur->next=pre;
            pre=cur;
            cur=aft;
        }
        return pre;
    }
};
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* first=NULL;
        ListNode* second=head;
        ListNode* third=NULL;
        while(second){
            third=second->next;//当前的下一节点
            second->next=first;//当前节点的指针指向上一个
            first=second;
            second=third;
            //到最后：second和third都变成了NULL，first为最后一个节点
        }
        return first;
    }
};

2、递归
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(!head||!head->next) return head;
        ListNode* res=reverseList(head->next);//递归函数里面带有下面的head->next语句
        head->next->next=head;//宏观上想，head->next之后已然反序，只需把head->next指向head
        head->next=NULL;
        return res;
    }
};
