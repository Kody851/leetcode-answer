https://leetcode-cn.com/problems/reverse-string/description/
1、最直接的方法，遍历+反向赋值，内存超出限制！
class Solution {
public:
    string reverseString(string s) {
        if(s.size()<=1) return s;
        string reverse="";
        for(int i=0;i<s.size();i++){
            reverse=s[i]+reverse;
        }
        return reverse;
    }
};
修改！ 
class Solution {
public:
    string reverseString(string s) {
        if(s.size()<=1) return s;
        string reverse="";
        int i=s.size()-1;
        while(i>=0){  //使用while会好一些
        reverse+=s[i];
        i--;
        }
        return reverse;
    }
};
2、交换首尾，时间缩小一半，无需辅助空间
class Solution {
public:
    string reverseString(string s) {
        if(s.size()<=1) return s;
        for(int i=0,j=s.size()-1;i<s.size()/2;i++){
            char tmp=s[i];
            s[i]=s[j];
            s[j]=tmp;
            j--;
        }
        return s;
    }
};
改用 while循环：
class Solution {  
public:  
    string reverseString(string s) {  
        string re = s;  
        int len = s.length();  
        if(len==0) return re;  
        int i = 0, j =len-1;  
        while(i<j)  
        {  
            char tmp = re[i];  
            re[i] = re[j];  
            re[j] = tmp;  
            i++;  
            j--;  
        }  
        return re;  
    }  
};  
3、栈！！
class Solution {
public:
    string reverseString(string s) {
        if(s.size()<=1) return s;
        string reverse;
        stack<char>stk;//定义栈，<char>
        int i=0;
        while(i<s.size()){
            stk.push(s[i]); //压入栈，.push,而不是.push_back
            i++;
        }
        while(!stk.empty()){ //不是空；.empty()
            char tmp=stk.top();//顶部元素.top()
            reverse.push_back(tmp);//字符串末尾追加：.push_back()。//也可使用reverse+=temp;
            stk.pop();//弹出：.pop()
        }
        
        return reverse;
    }
};
