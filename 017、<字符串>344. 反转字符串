https://leetcode-cn.com/problems/reverse-string/description/

编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。
不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。
你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。
示例 1：
输入：["h","e","l","l","o"]
输出：["o","l","l","e","h"]
示例 2：
输入：["H","a","n","n","a","h"]
输出：["h","a","n","n","a","H"]

1、最直接的方法，遍历+反向赋值，内存超出限制！
class Solution {
public:
    string reverseString(string s) {
        if(s.size()<=1) return s;
        string reverse="";
        for(int i=0;i<s.size();i++){
            reverse=s[i]+reverse;
        }
        return reverse;
    }
};
修改！ 
class Solution {
public:
    string reverseString(string s) {
        if(s.size()<=1) return s;
        string reverse="";
        int i=s.size()-1;
        while(i>=0){  //使用while会好一些
        reverse+=s[i];
        i--;
        }
        return reverse;
    }
};
2、交换首尾，时间缩小一半，无需辅助空间
class Solution {
public:
    string reverseString(string s) {
        if(s.size()<=1) return s;
        for(int i=0,j=s.size()-1;i<s.size()/2;i++){
            char tmp=s[i];
            s[i]=s[j];
            s[j]=tmp;
            j--;
        }
        return s;
    }
};
改用 while循环：
class Solution {  
public:  
    string reverseString(string s) {  
        string re = s;  
        int len = s.length();  
        if(len==0) return re;  
        int i = 0, j =len-1;  
        while(i<j)  
        {  
            char tmp = re[i];  
            re[i] = re[j];  
            re[j] = tmp;  
            i++;  
            j--;  
        }  
        return re;  
    }  
};  
3、栈！！
class Solution {
public:
    string reverseString(string s) {
        if(s.size()<=1) return s;
        string reverse;
        stack<char>stk;//定义栈，<char>
        int i=0;
        while(i<s.size()){
            stk.push(s[i]); //压入栈，.push,而不是.push_back
            i++;
        }
        while(!stk.empty()){ //不是空；.empty()
            char tmp=stk.top();//顶部元素.top()
            reverse.push_back(tmp);//字符串末尾追加：.push_back()。//也可使用reverse+=temp;
            stk.pop();//弹出：.pop()
        }
        
        return reverse;
    }
};

二刷：
/*class Solution {//超出内存限制
public:
    string reverseString(string s) {
        string res="";//string是不可变的，每次都会开辟一个新的内存,引起内存超限
        for(int i=0;i<s.size();i++){
            res=s[i]+res;
        }
        return res;
    }
};*/
class Solution {//8 ms
public:
    string reverseString(string s) {
        int i=0;
        while(i<s.size()/2){//此处不能加等号，对偶数个字符的例子通不过
            int tmp=s[i];
            s[i]=s[s.size()-1-i];
            s[s.size()-1-i]=tmp;
            i++;
        }
        return s;
    }
};
/*class Solution {////8 ms
public:
    string reverseString(string s) {
        string res;
        stack<char>stk;
        int i=0;
        while(i<s.size()){//while比for快得多
            stk.push(s[i]);
            i++;
        }
        while(!stk.empty()){
            res.push_back(stk.top());//res+=stk.top();
            stk.pop();
        }
        return res;
    }
};/*
