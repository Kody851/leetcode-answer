https://leetcode-cn.com/problems/powx-n/description/
博客：Pow(x, n) -- LeetCode - CSDN博客 https://blog.csdn.net/linhuanmars/article/details/20092829
Leetcode 50 Pow(x, n) 两种方式求解 - CSDN博客 https://blog.csdn.net/u013575812/article/details/50969248

1、二分法
class Solution {
public:
    double myPow(double x, int n) {
        if(n==0) return 1;
        double half=myPow(x,n/2);//使用了递归
        if(n%2==0) return half*half;
        else if(n>0) return half*half*x;
        else return half*half/x;
    }
};

//2019/1/3
/*class Solution {//超出时间限制
public:
    double myPow(double x, int n) {
        double res=1;
        if(n==0) return 1;
        if(n>0){
            int i=0;
            while(i<n){
                res=res*x;
                i++;
            }
            return res;
        }
        if(n<0){
            int i=0;
            while(i<-n){
                res=res*x;
                i++;
            }
            return 1/res;
        }
    }
};*/

/*class Solution {//8 ms
public:
    double myPow(double x, int n) {
        if(n==0) return 1;
        double half=myPow(x, n/2);
        if(n%2==0) return half*half;
        else if(n>0) return half*half*x;
        else return half*half/x;
    }
};*/
class Solution {//8 ms
public:
    double myPow(double x, int n) {
        if(n==0) return 1;
        double res=1.0;
        for(int i=n;i!=0;i/=2){
            if(i%2!=0) res*=x;
            x*=x;
        }
        return n>0?res:1/res; 
    }
};

2、位运算（待续！！！！！！！！！！！！！！！）
